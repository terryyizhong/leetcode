'''
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]
'''
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def levelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        level = collections.defaultdict(list)     
        queue = collections.deque([(root, 0)])
        while queue:
            node, l = queue.popleft()
            if node:
                level[l].append(node.val)       # this can deal with append one level in different loop
                queue += (node.left, l+1), (node.right, l+1)
        return [col[i] for i in range(len(col))]
##
# concise solution:
def levelOrder(self, root):
    ans, level = [], [root]
    while root and level:
        ans.append([node.val for node in level])       # each loop append one level      
        level = [kid for n in level for kid in (n.left, n.right) if kid]    # update level
    return ans
