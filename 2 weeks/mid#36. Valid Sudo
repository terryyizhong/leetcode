class Solution(object):
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        l = len(board)
        for i in range(l):
            dic = {}
            for j in range(l):
                if board[i][j] != '.':
                    dic[board[i][j]] = dic.get(board[i][j], 0) + 1
            for d in dic.values():
                if d > 1:
                    return False
        for i in range(l):
            dic = {}
            for j in range(l):
                if board[j][i] != '.':
                    dic[board[j][i]] = dic.get(board[j][i], 0) + 1
            for d in dic.values():
                if d > 1:
                    return False
        for i in range(0, l, 3):
            for j in range(0, l, 3):
                dic = {}
                for a in range(i, i+3):
                    for b in range(j, j+3):
                        if board[a][b] != '.':
                            dic[board[a][b]] = dic.get(board[a][b], 0) + 1
                for d in dic.values():
                    if d > 1:
                        return False
        return True
###################### readable
class Solution(object):
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        return (self.row_check(board) and
                self.col_check(board) and 
                self.square_check(board))
        
    def is_valid(self, unit):
        unit = [i for i in unit if i != '.']
        return len(unit) == len(set(unit))
    
    def row_check(self, board):
        for row in board:
            if not self.is_valid(row):
                return False
        return True
    
    def col_check(self, board):
        for col in zip(*board):
            if not self.is_valid(col):
                return False
        return True
        
    def square_check(self, board):
        for row in range(0, 9, 3):
            for col in range(0, 9, 3):
                square = [board[i][j] for i in range(row, row+3) for j in range(col, col+3)]
                if not self.is_valid(square):
                    return False
        return True
        
#######################bravo!!!!!!!!!!!!!!!!!
    def isValidSudoku(self, board):
        bigtable = set()
        for i, row in enumerate(board):
            for j, curr in enumerate(row):
                if curr != '.':
                    if (i, curr) in bigtable or (curr, j) in bigtable or (i//3, j//3, curr) in bigtable:
                        return False
                    bigtable.add((i, curr))
                    bigtable.add((curr, j))
                    bigtable.add((i//3, j//3, curr))
        return True

#######same idea with list makes code shorter
def isValidSudoku(self, board):
    seen = []
    for i, row in enumerate(board):
        for j, c in enumerate(row):
            if c != '.':
                seen += [(c,j),(i,c),(i/3,j/3,c)]
    return len(seen) == len(set(seen))
      
