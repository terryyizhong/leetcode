class MyQueue(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.i, self.o = [], []       # have to use two stack to simulate the queue


    def push(self, x):
        """
        Push element x to the back of queue.
        :type x: int
        :rtype: void
        """
        self.i.append(x)

    def pop(self):
        """
        Removes the element from in front of queue and returns that element.
        :rtype: int
        """
        self.reverse()
        return self.o.pop()

    def peek(self):
        """
        Get the front element.
        :rtype: int
        """
        self.reverse()
        return self.o[-1]

    def empty(self):
        """
        Returns whether the queue is empty.
        :rtype: bool
        """
        return not self.o and not self.i
    
    def reverse(self):            # when the 'o' stack is not empty, the front element of queue must the the front of 'o'
        if not self.o:            # if 'o' is empty, just reverse the order of element in i by append to o iteratively
            while self.i:       
                self.o.append(self.i.pop())


# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()
