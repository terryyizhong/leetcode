Given an array of integers, find if the array contains any duplicates. 
Your function should return true if any value appears at least twice in the array, 
and it should return false if every element is distinct.

class Solution(object):
    def containsDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        return True if len(set(nums)) - len(nums) else False

######################
This problem seems trivial, so lets try different approaches to solve it:

Starting from worst time complexity to the best one:

Time complexity: O(N^2), memory: O(1)
The naive approach would be to run a iteration for each element and see whether a duplicate value can be found: 
this results in O(N^2) time complexity.
###################################

Time complexity: O(N lg N), memory: O(1) - not counting the memory used by sort
Since it is trivial task to find duplicates in sorted array, 
we can sort it as the first step of the algorithm and then search for consecutive duplicates.

 ####################################
Time complexity: O(N), memory: O(N)

Finally we can used a well known data structure hash table that will help us to identify 
whether an element has been previously encountered in the array.

This is trivial but quite nice example of space-time tradeoff.
