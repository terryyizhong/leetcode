'''''
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5 
Show Company Tags
Show Tags
'''''
class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        l = len(nums1) + len(nums2)
        if l % 2:
            return self.findK(nums1, nums2, l//2 + 1)
        else: 
            return (self.findK(nums1, nums2, l//2) + self.findK(nums1, nums2, l//2 + 1)) / 2.0  #in python 2 need to use 2.0, 
                                                                                                  not need in python 3
            
    def findK(self, a, b, k):
        la, lb = len(a), len(b)
        if la > lb:
            return self.findK(b, a, k)    # cannot use a,b = b, a because la,lb will not change the same time
        if not la:
            return b[k-1]
        if k == 1:                    #key base case
            return min(a[0], b[0])
        i = min(k // 2, la)
        j = k - i
        if b[j-1] >= a[i-1]:                                      
            return self.findK(a[i:], b[:j], j)
        else:                                                   
            return self.findK(a[:i], b[j:], i)
        #if b[j-1] > a[i-1]:                            for better readable, if a[i-1] == b[j-1] just return one of them       
         #   return self.findK(a[i:], b[:j], j)             
        #elif b[j-1] < a[i-1]:
         #   return self.findK(a[:i], b[j:], i)
        #else:
         #   return a[i-1]    
# key point:
'''
We should also consider the edge case, that is, when should we stop?
1. When A or B is empty, we return B[k-1]( or A[k-1]), respectively;
2. When k is 1(when A and B are both not empty), we return the smaller one of A[0] and B[0]
3. When A[k/2-1] = B[k/2-1], we should return one of them
'''
################################3            
class Solution:
    # @return a float
    def findMedianSortedArrays(self, A, B):
        l=len(A)+len(B)
        return self.findKth(A,B,l//2) if l%2==1 else (self.findKth(A,B,l//2-1)+self.findKth(A,B,l//2))/2.0
            
            
    def findKth(self,A,B,k):
        if len(A)>len(B):
            A,B=B,A
        if not A:
            return B[k]
        if k==len(A)+len(B)-1:
            return max(A[-1],B[-1])
        i=len(A)//2
        j=k-i
        if A[i]>B[j]:
            #Here I assume it is O(1) to get A[:i] and B[j:]. In python, it's not but in cpp it is.
            return self.findKth(A[:i],B[j:],i)
        else:
            return self.findKth(A[i:],B[:j],j)
                            
        
                
                
