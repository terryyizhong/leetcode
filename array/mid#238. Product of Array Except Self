'''
Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].

Follow up:
Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)

Show Company Tags
Show Tags
Show Similar Problems
'''
#in first loop(forward), store the product before i, and in backward loop mutiply the product after i O(n) time O(1) space
class Solution(object):
    def productExceptSelf(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        output, l, t = [], len(nums), 1
        for i in range(l):
            output.append(t)
            t *= nums[i]
        t = 1
        for j in range(1, l+1):
            output[-j] *= t
            t *= nums[-j]
        return output
# can do in one loop:
        for i in range(len(nums)):
            j = -1-i
            arr[i]*=pi; arr[j]*=pj
            pi *= nums[i]; pj *= nums[j]                          
        return arr
        
