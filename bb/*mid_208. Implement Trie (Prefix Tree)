'''

Implement a trie with insert, search, and startsWith methods.

Note:
You may assume that all inputs are consist of lowercase letters a-z.
'''
class TrieNode:
    def __init__(self):
        self.child = {} 
        self.is_word = False
        
class Trie:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = TrieNode()
        

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: void
        """
        curr = self.root
        for l in word:
            if l not in curr.child:
                curr.child[l] = TrieNode()
            curr = curr.child[l]
        curr.is_word = True
        
    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        curr = self.root
        for l in word:
            if l not in curr.child:
                return False
            curr = curr.child[l]
        return curr.is_word

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        curr = self.root
        for l in prefix:
            if l not in curr.child:
                return False
            curr = curr.child[l]
        return True
