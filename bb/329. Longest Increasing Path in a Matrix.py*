'''
Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

Example 1:

nums = [
  [9,9,4],
  [6,6,8],
  [2,1,1]
]
Return 4
The longest increasing path is [1, 2, 6, 9].

Example 2:

nums = [
  [3,4,5],
  [3,2,6],
  [2,2,1]
]
Return 4
The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
'''
#We can find longest decreasing path instead, the result will be the same. Use dp to record previous results and choose the max dp value of smaller neighbors.
class Solution(object):
    def longestIncreasingPath(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        def dfs(i, j):
            if not dp[i][j]:  # if already searched, already saved at this position.
                curr = matrix[i][j]
                dp[i][j] = 1 + max(
                                dfs(i-1, j) if i > 0 and matrix[i-1][j] > curr else 0,
                                dfs(i+1, j) if i < m - 1 and matrix[i+1][j] > curr else 0,
                                dfs(i, j-1) if j > 0 and matrix[i][j-1] > curr else 0,
                                dfs(i, j+1) if j < n - 1 and matrix[i][j+1] > curr else 0)
            return dp[i][j]
            
        if not matrix or not matrix[0]: return 0
        m, n = len(matrix), len(matrix[0])
        dp = [[0]*n for i in range(m)]    #save longest increase/decrease path start with the position.  
        return max(dfs(i, j) for i in range(m) for j in range(n))
