'''
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:
    2
   / \
  1   3
Binary tree [2,1,3], return true.
Example 2:
    1
   / \
  2   3
Binary tree [1,2,3], return false.
Show Company Tags
Show Tags
Show Similar Problems
'''
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

# recursive 

class Solution(object):
    def isValidBST(self, root, min=float('-inf'), max=float('inf')):  # the way to set the default +- infinity
        if not root:
    		return True
    	if root.val <= min or root.val >= max:
    		return False
    	return self.isValidBST(root.left, min, root.val) and self.isValidBST(root.right, root.val, max)   #update the min and max when to right and to left

## inorder traversal
class Solution(object):
def isValidBST(self, root):
    """
    :type root: TreeNode
    :rtype: bool
    """

    self.res = list()
    self.validation(root)   
    
    
    return self.res == sorted(self.res) and len(set(self.res)) == len(self.res)   #test whether sorted and has the same val
    
def validation(self, root):     # construct the inorder list
    
    if not root:
        return 
    else:
        self.validation(root.left)
        self.res.append(root.val)
        self.validation(root.right)
