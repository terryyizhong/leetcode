'''
Reverse bits of a given 32 bits unsigned integer.

For example, given input 43261596 (represented in binary as 00000010100101000001111010011100), return 964176192 (represented in binary as 00111001011110000010100101000000).

Follow up:
If this function is called many times, how would you optimize it?

Related problem: Reverse Integer

Credits:
Special thanks to @ts for adding this problem and creating all test cases.
'''
class Solution:
    # @param n, an integer
    # @return an integer
    def reverseBits(self, n):
        bit = '{0:032b}'.format(n)
        bit = bit[::-1]       #o(n) space
        return int(bit, 2)
##########        
def reverseBits(self, n):
    return int(bin(n)[2:].zfill(32)[::-1], 2)
#basic bit computation:    
    class Solution:
    # @param n, an integer
    # @return an integer
    def reverseBits(self, n):
        ans = 0
        for i in range(32):
            ans = (ans << 1) + (n & 1)
            n >>= 1
        return ans
        
