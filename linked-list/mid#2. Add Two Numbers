You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

######### solution that need no addition space but need to change one of the linked-list
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        c, head = 0, l1
        while l1.next and l2.next:      #should stop before get to None node, or cannot go back
            add = l1.val + l2.val + c
            l1.val, c = add % 10, add // 10
            l1, l2 = l1.next, l2.next
        if not l1.next:         
            l1.next = l2.next       ##if l2 longer than l1, point curr node to the remain part of l2
        add = l1.val + l2.val + c   ##remain the last add of both l1 and l2
        l1.val, c = add % 10, add // 10
        while c and l1.next:    #add part of remainning one list
            l1 = l1.next
            l1.val, t = (l1.val + t) % 10, (l1.val + t) // 10
        if t == 1:  #if need to add one more node(9 ->  01)
            l1.next = ListNode(1)
        return head
#O(1) space, O(n)time        

## Following solution is the most straightforward way: create a new linkedlist to store new add        
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        dummy = curr = ListNode(0)
        carry = 0
        while l1 or l2 or carry:
            add = carry
            if l1:
                add += l1.val
                l1 = l1.next    # go next only l1 is not Nonw
            if l2:
                add += l2.val
                l2 = l2.next
            curr.next = ListNode(add % 10)
            curr = curr.next       #do not forget change the pointer 
            carry = add // 10
        return dummy.next
        
